Sean Konz and Schuyler Tilney-Volk
Lab 4 - Creating a Hardware Accelerator

Only two things were changed significantly in this lab - the accelerator and the control logic. The first, the accelerator, we changed to reflect the convolution calculations. The starting values were calculated in the code given to us, so the only task required in the accelerator file was to combine the individual results. These combined results are then checked (verify that they are in range), and if out of range they are adjusted to either the min or max value appropriately. This is done for both the vertical and horizontal results. Those two sets of results are then properly combined into a total (also verified to make sure in range) and then reconverted to sobel_out. 

As for the control logic implementation, most of the changes were just removals of cases, creation of four temp variables, and adjustments of transition states. The most basic changes were to the incrementation variables (when to move to next row, col, etc and how). After this, one of the most important values to monitor was the buf_write_en - we only wanted it to write when we had data to write - otherwise we would run the risk of writing invalid data. Most of the cases were able to be eliminated or were just deemed unnecessary, as most of them could just be managed by a default case: take, for example, the write case - the default was to drive it low unless it was calculating a value. Or in the case of the offset, just use the offset from the previous/current case. As for the temp variables, these were useful for the offset calculations. For example, the read offset temp stores the read offset of the beginning of the next column strip, and it is updated using a flip flop and a control block case statement, just as the other control elements are designed. We chose buf_read_offset_temp to be updated in the LOADING_1 state. This guarantees it will be updated once per column strip and will not conflict with column-changing logic at the end of columns, even though this state was chosen arbitrarily.

For more detail, our code comments highlight specific nuances about the variables and calculations.